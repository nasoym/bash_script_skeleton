#!/usr/bin/env bash
# more portable than /bin/bash

set -o errexit  # abort when any commands exits with error
set -o pipefail # abort when any command in a pipe exits with error
set -o nounset  # abort when any unset variable is used
set -f # prevent bash from expanding glob
#short: set -eufo pipefail
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR
trap 'echo "finalize"' EXIT

source $(dirname $(realpath $0))/lib/helper

function help() {
  cat $0 \
    | grep -B1 "^\(if\|elif\).*\$1" \
    | sed \
      -e 's/^.*\[\[/[/g' \
      -e 's/]].*$/]/g' \
      -e '/^--$/d' \
      -e '/^$/d'
}

while getopts "a:hx" options; do case $options in
  a) a="$OPTARG" ;;
  h) help; exit ;;
  x) set -x ;;
esac; done; shift $((OPTIND - 1))

[[ -r ~/.$(basename ${0})rc ]] && { source ~/.$(basename ${0})rc; }
: ${hello_file:="$(dirname $(realpath $0))/hello"}
: ${a:="default for var a"}

if [[ "$#" -eq 0 ]];then
  :

elif [[ "$1" == "hello" ]];then shift
  cat $hello_file

elif [[ "$1" == "helper" ]];then shift
  helper

elif [[ "$1" == "password" ]];then shift
  echo "password:$password"

elif [[ "$1" == "a" ]];then shift
  echo "a:$a"

# trap can show the line of an error
elif [[ "$1" == "error" ]];then shift
  echo "before false"
  false
  echo "after false"

elif [[ "$1" =~ ^[0-9]*$ ]];then 
  echo "number input: $1"

elif [[ "$1" == "stdin" ]];then shift
  if [[ ! -t 0 ]]; then
    echo "stdin:yes"
    echo "$(cat)"
  else
    echo "stdin:no"
  fi

else
  echo "unknown command: $1"

fi

