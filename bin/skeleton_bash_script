#!/usr/bin/env bash
# more portable than /bin/bash

set -o errexit  # abort when any commands exits with error
set -o pipefail # abort when any command in a pipe exits with error
set -o nounset  # abort when any unset variable is used
set -f # prevent bash from expanding glob
#short: set -eufo pipefail
trap 'echo "$0: line ${LINENO}: exiting because of error";exit 1' ERR
trap 'echo "finalize"' EXIT

source $(dirname $(realpath $0))/lib/helper

function help() {
  cat $0 \
    | sed -n '/^while getopts/,/esac; done; shift/p' \
    | sed -e '1d' -e '$d' -e 's/ ;;$//g' -e 's/^ *//g'
  cat $0 \
    | grep -B1 "^\s*\(if\|elif\).*\$1.*then" \
    | sed \
      -e 's/^[^[]*\[\+/[/g' \
      -e 's/]\+\s*;.*$/]/g' \
      -e '/^--$/d' \
      -e '/^$/d'
}

while getopts "a:h?" options; do case $options in
  a) a="$OPTARG" ;;
  h|?) help; exit ;;
esac; done; shift $((OPTIND - 1))

[[ -r ~/.$(basename ${0})rc ]] && { source ~/.$(basename ${0})rc; }

: ${rc_file:="${HOME}/.skeleton_bash_rc"}
if [[ -r "${rc_file}" ]]; then
  if ( cd $( dirname $(realpath "$rc_file")); git diff-index --quiet HEAD -- ) && \
     ( cd $( dirname $(realpath "$rc_file")); git ls-files $(realpath "$rc_file") --error-unmatch ); then
    source "${rc_file}"
  else
    echo "the rc file was either not in git or uncommitted changes found" >&2
    exit 1
  fi
fi

: ${hello_file:="$(dirname $(realpath $0))/hello"}
: ${a:="default for var a"}
: ${trace:=0}

if [[ "$trace" -eq 1 ]];then
  PS4='${LINENO}: '
  set -x
fi

if [[ "$#" -eq 0 ]];then
  :

elif [[ "$1" == "hello" ]];then shift
  cat $hello_file

elif [[ "$1" == "helper" ]];then shift
  helper

elif [[ "$1" == "one" ]];then shift
  : ${one:="${1:-"blabla"}"}
  echo "----${1:-"blabla"}----"
  echo "one: $one"

elif [[ "$1" == "password" ]];then shift
  echo "password:$password"

elif [[ "$1" == "a" ]];then shift
  echo "a:$a"

# trap can show the line of an error
elif [[ "$1" == "error" ]];then shift
  echo "before false"
  false
  echo "after false"

elif [[ "$1" =~ ^[0-9]*$ ]];then 
  echo "number input: $1"

elif [[ "$1" == "params" ]];then shift
  echo "---- ${1:-"bb"}"
  echo "---- ${1-"foo"}"
  echo "all: $@"
  if [[ "$#" -ge 1 ]];then
    shift
  fi
  echo "all: $@"
  [[ "$#" -ge 1 ]] && { shift; }
  echo "all: $@"

elif [[ "$1" == "stdin" ]];then shift
  # -p file is a pipe
  if [[ -p /dev/stdin ]]; then
    echo "stdin:yes"
    stdin_content="$(cat)"
    echo "old stdin: $stdin_content"

    new_stdin="$(echo -n "${stdin_content}" | jq -s -R -r '.|split("")[0:-1]|join("")')"
    echo "new stdin: $new_stdin"

    if [[ -n "$new_stdin" ]];then
      echo "$new_stdin" | $0 stdin 
    fi
    # </dev/null
  else
    echo "stdin:no"
  fi

else
  echo "unknown command: $@" >&2
  exit 1

fi

